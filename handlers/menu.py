import logging

from aiogram import F, Router
from aiogram.types import Message

from database import db
from helpers import format_rating_message, format_reminder_message
from keyboards.menu import admin_menu_kb, main_menu_kb
from keyboards.tasks import reminder_inline_kb, tasks_inline_kb

router = Router()

logger = logging.getLogger(__name__)


@router.message(F.text == "/menu")
async def menu_command(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb)


@router.message(F.text == "/admin")
async def admin_command(message: Message):
    is_admin = db.is_user_admin(message.from_user.id)
    if not is_admin:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º!", reply_markup=main_menu_kb)
        return
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_menu_kb)


@router.message(F.text == "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def list_users_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    is_admin = db.is_user_admin(message.from_user.id)
    if not is_admin:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º!", reply_markup=main_menu_kb)
        return

    try:
        total_users = db.get_user_count()
        await message.answer(f"–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.message(F.text == "üìã –ó–∞–¥–∞–Ω–∏—è")
async def tasks(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ", reply_markup=tasks_inline_kb)


@router.message(F.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def reminder(message: Message):
    reminder = db.is_reminder_exist(message.from_user.id)
    await message.answer(
        format_reminder_message(reminder), reply_markup=reminder_inline_kb
    )


@router.message(F.text == "üèÜ –£—Ä–æ–≤–µ–Ω—å")
async def rating(message: Message):
    await message.answer(
        f"–í–∞—à –¢–µ–∫—É—â–∏–π –£—Ä–æ–≤–µ–Ω—å üèÜ: {db.get_user_level(message.from_user.id)}\n\n–†–µ—à–∞–π—Ç–µ –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π, —á—Ç–æ–±—ã –±—ã—Ç—å –ª—É—á—à–µ –≤—Å–µ—Ö!"
    )


@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç!\n–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É:\n@admin")


@router.message(F.text == "üèÖ –†–µ–π—Ç–∏–Ω–≥")
async def rating(message: Message):
    try:
        user_data = db.get_top_and_user_position(message.from_user.id)

        rating_message = "–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for i, user in enumerate(user_data["top_users"], start=1):
            rating_message += f"{i}. {user['display_name']}: {user['rating']} –æ—á–∫–æ–≤\n"

        if user_data["user_position"] > 0:
            rating_message += "–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"
            rating_message += f"–ü–æ–∑–∏—Ü–∏—è: {user_data['user_position']}\n"
            rating_message += f"–û—á–∫–∏: {user_data['user_rating']}"
        else:
            rating_message += "–í—ã –ø–æ–∫–∞ –Ω–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.\n"

        await message.answer(rating_message)

    except Exception as e:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
